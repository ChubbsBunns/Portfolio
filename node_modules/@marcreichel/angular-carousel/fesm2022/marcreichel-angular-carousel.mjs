import * as i0 from '@angular/core';
import { Directive, EventEmitter, QueryList, Component, ChangeDetectionStrategy, Input, Output, ContentChildren, NgModule } from '@angular/core';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';

class CarouselSlideDirective {
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.7", ngImport: i0, type: CarouselSlideDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.7", type: CarouselSlideDirective, selector: "[angularCarouselSlide]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.7", ngImport: i0, type: CarouselSlideDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[angularCarouselSlide]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });

class CarouselComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.bullets = true;
        this.infinite = false;
        this.auto = false;
        this.duration = 5000;
        this.page = new EventEmitter();
        this.previous = new EventEmitter();
        this.next = new EventEmitter();
        this.slides = new QueryList();
        this.currentSlide = 0;
        this.interval = 0;
    }
    ngAfterContentChecked() {
        this.cdr.detectChanges();
        this.currentSlide = Math.max(Math.min(this.currentSlide, this.slides.length - 1), 0);
    }
    ngOnChanges(changes) {
        if (changes.auto) {
            if (changes.auto.currentValue) {
                this.startInterval();
            }
            else {
                this.stopInterval();
            }
        }
    }
    ngOnDestroy() {
        this.stopInterval();
    }
    previousSlide($event) {
        if ($event) {
            $event.preventDefault();
            $event.stopPropagation();
        }
        if (this.currentSlide <= 0) {
            this.currentSlide = this.slides.length - 1;
        }
        else {
            this.currentSlide--;
        }
        this.emitPrevious();
        this.restartInterval();
    }
    nextSlide($event) {
        if ($event) {
            $event.preventDefault();
            $event.stopPropagation();
        }
        if (this.currentSlide >= this.slides.length - 1) {
            this.currentSlide = 0;
        }
        else {
            this.currentSlide++;
        }
        this.emitNext();
        this.restartInterval();
    }
    goToSlide(slide, $event) {
        if ($event) {
            $event.preventDefault();
            $event.stopPropagation();
        }
        const index = slide - 1;
        if (index < 0 || index >= this.slides.length) {
            return;
        }
        if (index === this.currentSlide) {
            return;
        }
        this.currentSlide = index;
        this.emitPage();
        this.restartInterval();
    }
    startInterval() {
        if (!this.auto) {
            return;
        }
        this.interval = setInterval(() => {
            this.nextSlide();
        }, Math.max(this.duration, 500));
    }
    stopInterval() {
        if (!this.auto) {
            return;
        }
        clearInterval(this.interval);
    }
    emitPrevious() {
        this.previous.emit(this.currentSlide + 1);
        this.emitPage();
    }
    emitNext() {
        this.next.emit(this.currentSlide + 1);
        this.emitPage();
    }
    emitPage() {
        this.page.emit(this.currentSlide + 1);
    }
    restartInterval() {
        this.stopInterval();
        this.startInterval();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.7", ngImport: i0, type: CarouselComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.7", type: CarouselComponent, selector: "angular-carousel", inputs: { bullets: "bullets", infinite: "infinite", auto: "auto", duration: "duration" }, outputs: { page: "page", previous: "previous", next: "next" }, queries: [{ propertyName: "slides", predicate: CarouselSlideDirective }], usesOnChanges: true, ngImport: i0, template: "<div class=\"carousel__container\">\n  <div class=\"carousel__slider\">\n    <div *ngIf=\"infinite || currentSlide > 0\" class=\"carousel__previous\">\n      <button (click)=\"previousSlide($event)\">\n        <svg viewBox=\"0 0 20 20\">\n          <polyline points=\"12 2, 7 10, 12 18\"\n                    stroke=\"currentColor\"\n                    stroke-width=\"2\"\n                    stroke-linecap=\"round\"\n                    fill=\"transparent\"\n                    stroke-linejoin=\"round\"></polyline>\n        </svg>\n      </button>\n    </div>\n    <ol [style.left.%]=\"currentSlide * -100\" class=\"carousel__slides\" (mouseenter)=\"stopInterval()\"\n        (mouseleave)=\"startInterval()\">\n      <li *ngFor=\"let slide of slides; let index = index\" [ngClass]=\"{'carousel__slide--active':index===currentSlide}\"\n          class=\"carousel__slide\">\n        <ng-container [ngTemplateOutlet]=\"slide.template\"></ng-container>\n      </li>\n    </ol>\n    <div *ngIf=\"infinite || currentSlide < slides.length - 1\" class=\"carousel__next\">\n      <button (click)=\"nextSlide($event)\">\n        <svg viewBox=\"0 0 20 20\">\n          <polyline points=\"8 2, 13 10, 8 18\"\n                    stroke=\"currentColor\"\n                    stroke-width=\"2\"\n                    stroke-linecap=\"round\"\n                    fill=\"transparent\"\n                    stroke-linejoin=\"round\"></polyline>\n        </svg>\n      </button>\n    </div>\n  </div>\n  <ng-container *ngIf=\"bullets === undefined || bullets\">\n    <ol class=\"carousel__bullets\">\n      <li *ngFor=\"let slide of slides; let index = index\">\n        <button (click)=\"goToSlide(index + 1, $event)\"\n                [ngClass]=\"{'carousel__bullet--active':index===currentSlide}\"\n                class=\"carousel__bullet\">\n          <span class=\"sr-only\">{{ index + 1 }}</span>\n        </button>\n      </li>\n    </ol>\n  </ng-container>\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.7", ngImport: i0, type: CarouselComponent, decorators: [{
            type: Component,
            args: [{ selector: 'angular-carousel', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"carousel__container\">\n  <div class=\"carousel__slider\">\n    <div *ngIf=\"infinite || currentSlide > 0\" class=\"carousel__previous\">\n      <button (click)=\"previousSlide($event)\">\n        <svg viewBox=\"0 0 20 20\">\n          <polyline points=\"12 2, 7 10, 12 18\"\n                    stroke=\"currentColor\"\n                    stroke-width=\"2\"\n                    stroke-linecap=\"round\"\n                    fill=\"transparent\"\n                    stroke-linejoin=\"round\"></polyline>\n        </svg>\n      </button>\n    </div>\n    <ol [style.left.%]=\"currentSlide * -100\" class=\"carousel__slides\" (mouseenter)=\"stopInterval()\"\n        (mouseleave)=\"startInterval()\">\n      <li *ngFor=\"let slide of slides; let index = index\" [ngClass]=\"{'carousel__slide--active':index===currentSlide}\"\n          class=\"carousel__slide\">\n        <ng-container [ngTemplateOutlet]=\"slide.template\"></ng-container>\n      </li>\n    </ol>\n    <div *ngIf=\"infinite || currentSlide < slides.length - 1\" class=\"carousel__next\">\n      <button (click)=\"nextSlide($event)\">\n        <svg viewBox=\"0 0 20 20\">\n          <polyline points=\"8 2, 13 10, 8 18\"\n                    stroke=\"currentColor\"\n                    stroke-width=\"2\"\n                    stroke-linecap=\"round\"\n                    fill=\"transparent\"\n                    stroke-linejoin=\"round\"></polyline>\n        </svg>\n      </button>\n    </div>\n  </div>\n  <ng-container *ngIf=\"bullets === undefined || bullets\">\n    <ol class=\"carousel__bullets\">\n      <li *ngFor=\"let slide of slides; let index = index\">\n        <button (click)=\"goToSlide(index + 1, $event)\"\n                [ngClass]=\"{'carousel__bullet--active':index===currentSlide}\"\n                class=\"carousel__bullet\">\n          <span class=\"sr-only\">{{ index + 1 }}</span>\n        </button>\n      </li>\n    </ol>\n  </ng-container>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { bullets: [{
                type: Input
            }], infinite: [{
                type: Input
            }], auto: [{
                type: Input
            }], duration: [{
                type: Input
            }], page: [{
                type: Output
            }], previous: [{
                type: Output
            }], next: [{
                type: Output
            }], slides: [{
                type: ContentChildren,
                args: [CarouselSlideDirective]
            }] } });

class CarouselModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.7", ngImport: i0, type: CarouselModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.1.7", ngImport: i0, type: CarouselModule, declarations: [CarouselComponent,
            CarouselSlideDirective], imports: [CommonModule], exports: [CarouselComponent,
            CarouselSlideDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.1.7", ngImport: i0, type: CarouselModule, imports: [CommonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.7", ngImport: i0, type: CarouselModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        CarouselComponent,
                        CarouselSlideDirective,
                    ],
                    imports: [
                        CommonModule,
                    ],
                    exports: [
                        CarouselComponent,
                        CarouselSlideDirective,
                    ]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { CarouselComponent, CarouselModule, CarouselSlideDirective };
//# sourceMappingURL=marcreichel-angular-carousel.mjs.map
